{"ast":null,"code":"import{useEffect,useState}from\"react\";import{useNavigate}from\"react-router-dom\";import axios from\"axios\";import{API_URL}from\"../../../config/contansts\";import{useRecoilState}from\"recoil\";import{loginState}from\"../../../recoil/atoms/State\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";const NaverLoginButton=()=>{const navigate=useNavigate();const[islogin,setIslogin]=useRecoilState(loginState);//useState와 거의 비슷한 사용법\nconst[naverLoginButton,setNaverLoginButton]=useState();const createMarkup=html=>{return{__html:html};};const MyComponent=html=>{return/*#__PURE__*/_jsx(\"div\",{dangerouslySetInnerHTML:createMarkup(html)});};useEffect(()=>{axios.get(\"\".concat(API_URL,\"/api/naver/naverlogin\")).then(res=>{console.log(res);setNaverLoginButton(MyComponent(res.data));}).catch(e=>{console.error(e);});userAccessToken();},[]);const userAccessToken=()=>{// window.location.href는 현재 페이지의 URL을 문자열로 반환하는 속성입니다.\n// includes 메소드를 사용하여 URL에 'code'이라는 문자열이 포함되어 있는지 확인합니다.\n// 만약 포함되어 있다면 getToken() 함수를 호출합니다.\nwindow.location.href.includes('code')&&getToken();};const getToken=async()=>{//?code=c4HdngWVGK3jEDwp2y&state=NAVER_STATE\nconst code=window.location.href.split('=')[1].split('&')[0];const state=window.location.href.split('=')[2];// 이후 로컬 스토리지 또는 state에 저장하여 사용하자!   \nlocalStorage.setItem('code',code);localStorage.setItem('state',state);const callbackRes=await axios.get(\"\".concat(API_URL,\"/api/naver/callback?code=\").concat(code,\"&state=\").concat(state));console.log(\"callbackRes: \",callbackRes);const memberRes=await axios.get(\"\".concat(API_URL,\"/api/naver/member?access_token=\").concat(callbackRes.data.access_token));console.log(\"memberRes: \",memberRes);const naverlogin=await axios.post(\"\".concat(API_URL,\"/api/user/naver-login\"),memberRes.data.response,{withCredentials:true}// 쿠키 수정허용\n);console.log(\"naverlogin: \",naverlogin);if(naverlogin.status==200){console.log('로그인성공!');// alert(\"로그인성공!\");\nsetIslogin(true);// 로컬스토리지에 저장. 브라우저닫아도 유지\nnavigate('/');}};return/*#__PURE__*/_jsx(_Fragment,{children:naverLoginButton});};export default NaverLoginButton;","map":{"version":3,"names":["useEffect","useState","useNavigate","axios","API_URL","useRecoilState","loginState","jsx","_jsx","Fragment","_Fragment","NaverLoginButton","navigate","islogin","setIslogin","naverLoginButton","setNaverLoginButton","createMarkup","html","__html","MyComponent","dangerouslySetInnerHTML","get","concat","then","res","console","log","data","catch","e","error","userAccessToken","window","location","href","includes","getToken","code","split","state","localStorage","setItem","callbackRes","memberRes","access_token","naverlogin","post","response","withCredentials","status","children"],"sources":["C:/Users/user/Desktop/Library-ec2/client/src/components/SocialLoginButtons/NaverLoginButton/NaverLoginButton.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { API_URL } from \"../../../config/contansts\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { loginState } from \"../../../recoil/atoms/State\";\r\n\r\nconst NaverLoginButton = () => {   \r\n\tconst navigate = useNavigate();\r\n\r\n\tconst [islogin, setIslogin] = useRecoilState(loginState); //useState와 거의 비슷한 사용법\r\n\r\n\tconst [naverLoginButton, setNaverLoginButton] = useState();\r\n\r\n\tconst createMarkup = (html) => {\r\n\t\treturn {__html: html};\r\n\t}\r\n\tconst MyComponent = (html) => {\r\n\t\treturn <div dangerouslySetInnerHTML={createMarkup(html)} />;\r\n\t}\r\n\r\n  useEffect(()=> {\r\n\t\taxios.get(`${API_URL}/api/naver/naverlogin`)\r\n\t\t.then(res => {\r\n\t\t\tconsole.log(res);\r\n\t\t\tsetNaverLoginButton(MyComponent(res.data));\r\n\t\t}).catch(e => {\r\n\t\t\tconsole.error(e);\r\n\t\t})\r\n\r\n\t\tuserAccessToken();\r\n\t}, []);\r\n\r\n  const userAccessToken = () => {\r\n    // window.location.href는 현재 페이지의 URL을 문자열로 반환하는 속성입니다.\r\n    // includes 메소드를 사용하여 URL에 'code'이라는 문자열이 포함되어 있는지 확인합니다.\r\n    // 만약 포함되어 있다면 getToken() 함수를 호출합니다.\r\n    window.location.href.includes('code') && getToken();\r\n\t}\r\n        \r\n  const getToken = async () => {\r\n    //?code=c4HdngWVGK3jEDwp2y&state=NAVER_STATE\r\n    const code = window.location.href.split('=')[1].split('&')[0];\r\n    const state = window.location.href.split('=')[2];\r\n  \r\n    // 이후 로컬 스토리지 또는 state에 저장하여 사용하자!   \r\n    localStorage.setItem('code', code);\r\n    localStorage.setItem('state', state);\r\n\r\n\t\t\tconst callbackRes = await axios.get(`${API_URL}/api/naver/callback?code=${code}&state=${state}`);\r\n\t\t\tconsole.log(\"callbackRes: \", callbackRes);\r\n\r\n\t\t\tconst memberRes = await axios.get(`${API_URL}/api/naver/member?access_token=${callbackRes.data.access_token}`);\r\n\t\t\tconsole.log(\"memberRes: \", memberRes);\r\n\r\n\t\t\tconst naverlogin = await axios.post(`${API_URL}/api/user/naver-login`, \r\n\t\t\t\tmemberRes.data.response,\r\n\t\t\t\t{ withCredentials: true }// 쿠키 수정허용\r\n\t\t\t);\r\n\t\t\t\r\n\t\t\tconsole.log(\"naverlogin: \", naverlogin);\r\n\r\n\t\t\tif(naverlogin.status == 200){\r\n\t\t\t\tconsole.log('로그인성공!');\r\n\t\t\t\t// alert(\"로그인성공!\");\r\n\t\t\t\tsetIslogin(true);// 로컬스토리지에 저장. 브라우저닫아도 유지\r\n\t\t\t\tnavigate('/'); \r\n\t\t\t}\r\n\t}\r\n\t\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{naverLoginButton}\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default NaverLoginButton"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}